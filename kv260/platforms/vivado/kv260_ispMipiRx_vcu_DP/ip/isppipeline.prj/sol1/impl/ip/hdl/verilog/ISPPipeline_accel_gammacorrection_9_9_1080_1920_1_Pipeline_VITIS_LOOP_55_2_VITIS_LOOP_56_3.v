// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_gammacorrection_9_9_1080_1920_1_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gamma_lut_address0,
        gamma_lut_ce0,
        gamma_lut_q0,
        lut_p_address0,
        lut_p_ce0,
        lut_p_we0,
        lut_p_d0,
        lut_p_1_address0,
        lut_p_1_ce0,
        lut_p_1_we0,
        lut_p_1_d0,
        lut_p_2_address0,
        lut_p_2_ce0,
        lut_p_2_we0,
        lut_p_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] gamma_lut_address0;
output   gamma_lut_ce0;
input  [7:0] gamma_lut_q0;
output  [7:0] lut_p_address0;
output   lut_p_ce0;
output   lut_p_we0;
output  [7:0] lut_p_d0;
output  [7:0] lut_p_1_address0;
output   lut_p_1_ce0;
output   lut_p_1_we0;
output  [7:0] lut_p_1_d0;
output  [7:0] lut_p_2_address0;
output   lut_p_2_ce0;
output   lut_p_2_we0;
output  [7:0] lut_p_2_d0;

reg ap_idle;
reg gamma_lut_ce0;
reg lut_p_ce0;
reg lut_p_we0;
reg lut_p_1_ce0;
reg lut_p_1_we0;
reg lut_p_2_ce0;
reg lut_p_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1073_fu_146_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] select_ln42_fu_170_p3;
reg   [8:0] select_ln42_reg_264;
reg   [8:0] select_ln42_reg_264_pp0_iter1_reg;
reg   [8:0] select_ln42_reg_264_pp0_iter2_reg;
wire   [1:0] select_ln42_1_fu_184_p3;
reg   [1:0] select_ln42_1_reg_270;
reg   [1:0] select_ln42_1_reg_270_pp0_iter1_reg;
reg   [1:0] select_ln42_1_reg_270_pp0_iter2_reg;
wire   [8:0] j_V_fu_192_p2;
reg   [8:0] j_V_reg_275;
reg   [7:0] gamma_lut_load_reg_285;
wire   [63:0] zext_ln587_3_fu_224_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln587_fu_233_p1;
reg   [8:0] rhs_fu_64;
reg   [8:0] ap_sig_allocacmp_rhs_load;
wire    ap_loop_init;
reg   [1:0] k_V_fu_68;
reg   [1:0] ap_sig_allocacmp_k_V_load;
reg   [9:0] indvar_flatten_fu_72;
wire   [9:0] add_ln1073_fu_152_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln1073_1_fu_164_p2;
wire   [1:0] add_ln886_fu_178_p2;
wire   [9:0] lhs_mid2_fu_208_p3;
wire   [9:0] zext_ln1541_fu_215_p1;
wire   [9:0] ret_V_fu_218_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1073_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_72 <= add_ln1073_fu_152_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1073_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_V_fu_68 <= select_ln42_1_fu_184_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_V_fu_68 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rhs_fu_64 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            rhs_fu_64 <= j_V_reg_275;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln42_1_reg_270_pp0_iter1_reg <= select_ln42_1_reg_270;
        select_ln42_reg_264_pp0_iter1_reg <= select_ln42_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        gamma_lut_load_reg_285 <= gamma_lut_q0;
        select_ln42_1_reg_270_pp0_iter2_reg <= select_ln42_1_reg_270_pp0_iter1_reg;
        select_ln42_reg_264_pp0_iter2_reg <= select_ln42_reg_264_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_V_reg_275 <= j_V_fu_192_p2;
        select_ln42_1_reg_270 <= select_ln42_1_fu_184_p3;
        select_ln42_reg_264 <= select_ln42_fu_170_p3;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_V_load = 2'd0;
    end else begin
        ap_sig_allocacmp_k_V_load = k_V_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_rhs_load = 9'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_rhs_load = j_V_reg_275;
        end else begin
            ap_sig_allocacmp_rhs_load = rhs_fu_64;
        end
    end else begin
        ap_sig_allocacmp_rhs_load = rhs_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gamma_lut_ce0 = 1'b1;
    end else begin
        gamma_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_p_1_ce0 = 1'b1;
    end else begin
        lut_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln42_1_reg_270_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_p_1_we0 = 1'b1;
    end else begin
        lut_p_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_p_2_ce0 = 1'b1;
    end else begin
        lut_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln42_1_reg_270_pp0_iter2_reg == 2'd0) & ~(select_ln42_1_reg_270_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_p_2_we0 = 1'b1;
    end else begin
        lut_p_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_p_ce0 = 1'b1;
    end else begin
        lut_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln42_1_reg_270_pp0_iter2_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lut_p_we0 = 1'b1;
    end else begin
        lut_p_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1073_fu_152_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln886_fu_178_p2 = (ap_sig_allocacmp_k_V_load + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign gamma_lut_address0 = zext_ln587_3_fu_224_p1;

assign icmp_ln1073_1_fu_164_p2 = ((ap_sig_allocacmp_rhs_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_146_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd768) ? 1'b1 : 1'b0);

assign j_V_fu_192_p2 = (select_ln42_fu_170_p3 + 9'd1);

assign lhs_mid2_fu_208_p3 = {{select_ln42_1_reg_270}, {8'd0}};

assign lut_p_1_address0 = zext_ln587_fu_233_p1;

assign lut_p_1_d0 = gamma_lut_load_reg_285;

assign lut_p_2_address0 = zext_ln587_fu_233_p1;

assign lut_p_2_d0 = gamma_lut_load_reg_285;

assign lut_p_address0 = zext_ln587_fu_233_p1;

assign lut_p_d0 = gamma_lut_load_reg_285;

assign ret_V_fu_218_p2 = (lhs_mid2_fu_208_p3 + zext_ln1541_fu_215_p1);

assign select_ln42_1_fu_184_p3 = ((icmp_ln1073_1_fu_164_p2[0:0] == 1'b1) ? add_ln886_fu_178_p2 : ap_sig_allocacmp_k_V_load);

assign select_ln42_fu_170_p3 = ((icmp_ln1073_1_fu_164_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_rhs_load);

assign zext_ln1541_fu_215_p1 = select_ln42_reg_264;

assign zext_ln587_3_fu_224_p1 = ret_V_fu_218_p2;

assign zext_ln587_fu_233_p1 = select_ln42_reg_264_pp0_iter2_reg;

endmodule //ISPPipeline_accel_gammacorrection_9_9_1080_1920_1_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3
