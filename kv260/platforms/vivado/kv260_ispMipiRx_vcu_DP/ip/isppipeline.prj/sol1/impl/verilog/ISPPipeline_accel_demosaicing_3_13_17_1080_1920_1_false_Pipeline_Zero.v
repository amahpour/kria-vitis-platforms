// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_demosaicing_3_13_17_1080_1920_1_false_Pipeline_Zero (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgblock_V_17_0,
        imgblock_V_12_0,
        imgblock_V_11_0,
        imgblock_V_7_0,
        imgblock_V_17_1_out,
        imgblock_V_17_1_out_ap_vld,
        imgblock_V_12_1_out,
        imgblock_V_12_1_out_ap_vld,
        imgblock_V_11_1_out,
        imgblock_V_11_1_out_ap_vld,
        imgblock_V_7_1_out,
        imgblock_V_7_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] imgblock_V_17_0;
input  [9:0] imgblock_V_12_0;
input  [9:0] imgblock_V_11_0;
input  [9:0] imgblock_V_7_0;
output  [9:0] imgblock_V_17_1_out;
output   imgblock_V_17_1_out_ap_vld;
output  [9:0] imgblock_V_12_1_out;
output   imgblock_V_12_1_out_ap_vld;
output  [9:0] imgblock_V_11_1_out;
output   imgblock_V_11_1_out_ap_vld;
output  [9:0] imgblock_V_7_1_out;
output   imgblock_V_7_1_out_ap_vld;

reg ap_idle;
reg imgblock_V_17_1_out_ap_vld;
reg imgblock_V_12_1_out_ap_vld;
reg imgblock_V_11_1_out_ap_vld;
reg imgblock_V_7_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln318_fu_152_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] p_fu_52;
wire   [2:0] add_ln318_fu_158_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [9:0] imgblock_V_7_1_fu_56;
wire   [9:0] select_ln323_4_fu_250_p3;
reg   [9:0] imgblock_V_11_1_fu_60;
wire   [9:0] select_ln323_1_fu_202_p3;
reg   [9:0] imgblock_V_12_1_fu_64;
wire   [9:0] select_ln323_3_fu_242_p3;
reg   [9:0] imgblock_V_17_1_fu_68;
wire   [9:0] select_ln323_2_fu_234_p3;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln323_fu_176_p1;
wire   [0:0] icmp_ln323_fu_188_p2;
wire   [0:0] tmp_fu_180_p3;
wire   [9:0] select_ln323_fu_194_p3;
wire   [0:0] icmp_ln323_2_fu_216_p2;
wire   [0:0] or_ln323_fu_222_p2;
wire   [0:0] icmp_ln323_1_fu_210_p2;
wire   [0:0] or_ln323_1_fu_228_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_11_1_fu_60 <= imgblock_V_11_0;
        end else if (((icmp_ln318_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_11_1_fu_60 <= select_ln323_1_fu_202_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_12_1_fu_64 <= imgblock_V_12_0;
        end else if (((icmp_ln318_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_12_1_fu_64 <= select_ln323_3_fu_242_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_17_1_fu_68 <= imgblock_V_17_0;
        end else if (((icmp_ln318_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_17_1_fu_68 <= select_ln323_2_fu_234_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_7_1_fu_56 <= imgblock_V_7_0;
        end else if (((icmp_ln318_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_7_1_fu_56 <= select_ln323_4_fu_250_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_fu_52 <= 3'd0;
        end else if (((icmp_ln318_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_fu_52 <= add_ln318_fu_158_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_11_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_11_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_12_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_12_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_17_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_17_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_7_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_7_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_fu_158_p2 = (p_fu_52 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln318_fu_152_p2 = ((p_fu_52 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln323_1_fu_210_p2 = ((trunc_ln323_fu_176_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_2_fu_216_p2 = ((trunc_ln323_fu_176_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_188_p2 = ((trunc_ln323_fu_176_p1 == 2'd2) ? 1'b1 : 1'b0);

assign imgblock_V_11_1_out = imgblock_V_11_1_fu_60;

assign imgblock_V_12_1_out = imgblock_V_12_1_fu_64;

assign imgblock_V_17_1_out = imgblock_V_17_1_fu_68;

assign imgblock_V_7_1_out = imgblock_V_7_1_fu_56;

assign or_ln323_1_fu_228_p2 = (or_ln323_fu_222_p2 | icmp_ln323_1_fu_210_p2);

assign or_ln323_fu_222_p2 = (icmp_ln323_fu_188_p2 | icmp_ln323_2_fu_216_p2);

assign select_ln323_1_fu_202_p3 = ((tmp_fu_180_p3[0:0] == 1'b1) ? select_ln323_fu_194_p3 : imgblock_V_11_1_fu_60);

assign select_ln323_2_fu_234_p3 = ((or_ln323_1_fu_228_p2[0:0] == 1'b1) ? imgblock_V_17_1_fu_68 : 10'd0);

assign select_ln323_3_fu_242_p3 = ((icmp_ln323_fu_188_p2[0:0] == 1'b1) ? 10'd0 : imgblock_V_12_1_fu_64);

assign select_ln323_4_fu_250_p3 = ((icmp_ln323_2_fu_216_p2[0:0] == 1'b1) ? 10'd0 : imgblock_V_7_1_fu_56);

assign select_ln323_fu_194_p3 = ((icmp_ln323_fu_188_p2[0:0] == 1'b1) ? 10'd0 : imgblock_V_11_1_fu_60);

assign tmp_fu_180_p3 = p_fu_52[32'd1];

assign trunc_ln323_fu_176_p1 = p_fu_52[1:0];

endmodule //ISPPipeline_accel_demosaicing_3_13_17_1080_1920_1_false_Pipeline_Zero
