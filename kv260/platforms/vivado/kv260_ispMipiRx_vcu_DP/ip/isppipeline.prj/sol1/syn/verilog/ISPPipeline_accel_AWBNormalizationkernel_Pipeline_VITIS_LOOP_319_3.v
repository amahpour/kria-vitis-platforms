// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_AWBNormalizationkernel_Pipeline_VITIS_LOOP_319_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hist_0_address0,
        hist_0_ce0,
        hist_0_q0,
        hist_1_address0,
        hist_1_ce0,
        hist_1_q0,
        hist_2_address0,
        hist_2_ce0,
        hist_2_q0,
        j,
        conv_i_i1584,
        minValue_V_i,
        minValue_V_o,
        minValue_V_o_ap_vld,
        minValue_V_4_i,
        minValue_V_4_o,
        minValue_V_4_o_ap_vld,
        minValue_V_3_i,
        minValue_V_3_o,
        minValue_V_3_o_ap_vld,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] hist_0_address0;
output   hist_0_ce0;
input  [31:0] hist_0_q0;
output  [9:0] hist_1_address0;
output   hist_1_ce0;
input  [31:0] hist_1_q0;
output  [9:0] hist_2_address0;
output   hist_2_ce0;
input  [31:0] hist_2_q0;
input  [1:0] j;
input  [26:0] conv_i_i1584;
input  [17:0] minValue_V_i;
output  [17:0] minValue_V_o;
output   minValue_V_o_ap_vld;
input  [17:0] minValue_V_4_i;
output  [17:0] minValue_V_4_o;
output   minValue_V_4_o_ap_vld;
input  [17:0] minValue_V_3_i;
output  [17:0] minValue_V_3_o;
output   minValue_V_3_o_ap_vld;
output  [17:0] p_out;
output   p_out_ap_vld;
output  [17:0] p_out1;
output   p_out1_ap_vld;
output  [17:0] p_out2;
output   p_out2_ap_vld;

reg ap_idle;
reg hist_0_ce0;
reg hist_1_ce0;
reg hist_2_ce0;
reg[17:0] minValue_V_o;
reg minValue_V_o_ap_vld;
reg[17:0] minValue_V_4_o;
reg minValue_V_4_o_ap_vld;
reg[17:0] minValue_V_3_o;
reg minValue_V_3_o_ap_vld;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire   [0:0] and_ln319_fu_328_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] j_read_reg_404;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [32:0] conv_i_i1584_cast_fu_259_p1;
reg  signed [32:0] conv_i_i1584_cast_reg_410;
reg   [10:0] p1_V_1_reg_415;
wire   [31:0] rhs_V_fu_283_p5;
reg   [31:0] rhs_V_reg_436;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] n1_V_2_reg_442;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] and_ln319_reg_447;
wire   [10:0] p1_V_2_fu_334_p2;
reg   [10:0] p1_V_2_reg_451;
reg   [17:0] minValue_V_read_reg_456;
reg   [17:0] minValue_V_3_read_reg_464;
reg   [17:0] minValue_V_4_read_reg_472;
wire   [0:0] icmp_ln1466_fu_351_p2;
wire   [17:0] minValue_V_1_fu_357_p2;
reg   [17:0] minValue_V_1_reg_484;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [17:0] ap_phi_reg_pp0_iter0_empty_286_reg_175;
reg   [17:0] ap_phi_reg_pp0_iter1_empty_286_reg_175;
wire   [17:0] ap_phi_reg_pp0_iter0_empty_287_reg_190;
reg   [17:0] ap_phi_reg_pp0_iter1_empty_287_reg_190;
wire   [17:0] ap_phi_reg_pp0_iter0_empty_288_reg_205;
reg   [17:0] ap_phi_reg_pp0_iter1_empty_288_reg_205;
reg   [17:0] ap_phi_mux_empty_phi_fu_223_p6;
wire   [17:0] ap_phi_reg_pp0_iter1_empty_reg_220;
reg   [17:0] ap_phi_mux_empty_284_phi_fu_236_p6;
wire   [17:0] ap_phi_reg_pp0_iter1_empty_284_reg_233;
reg   [17:0] ap_phi_mux_empty_285_phi_fu_249_p6;
wire   [17:0] ap_phi_reg_pp0_iter1_empty_285_reg_246;
wire   [63:0] zext_ln587_fu_276_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [31:0] lhs_V_fu_74;
wire   [31:0] n1_V_fu_339_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage2;
reg   [10:0] p1_V_fu_78;
reg   [10:0] ap_sig_allocacmp_p1_V_1;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1_01001;
wire   [32:0] zext_ln232_23_fu_301_p1;
wire   [32:0] zext_ln232_fu_297_p1;
wire   [32:0] ret_V_fu_304_p2;
wire   [0:0] tmp_fu_315_p3;
wire   [0:0] icmp_ln1073_fu_310_p2;
wire   [0:0] xor_ln1073_fu_322_p2;
wire   [17:0] tmp_7_fu_343_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_378;
reg    ap_condition_376;
reg    ap_condition_385;
reg    ap_condition_388;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U262(
    .din0(hist_0_q0),
    .din1(hist_1_q0),
    .din2(hist_2_q0),
    .din3(j),
    .dout(rhs_V_fu_283_p5)
);

ISPPipeline_accel_mux_32_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 18 ))
mux_32_18_1_1_U263(
    .din0(minValue_V_read_reg_456),
    .din1(minValue_V_3_read_reg_464),
    .din2(minValue_V_4_read_reg_472),
    .din3(j),
    .dout(tmp_7_fu_343_p5)
);

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447))) begin
        ap_phi_reg_pp0_iter1_empty_286_reg_175 <= 18'd0;
    end else if ((((j_read_reg_404 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd0) & (1'd1 == and_ln319_reg_447)))) begin
        ap_phi_reg_pp0_iter1_empty_286_reg_175 <= minValue_V_4_read_reg_472;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter1_empty_286_reg_175 <= ap_phi_reg_pp0_iter0_empty_286_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if (((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd0) & (1'd1 == and_ln319_reg_447)))) begin
        ap_phi_reg_pp0_iter1_empty_287_reg_190 <= minValue_V_3_read_reg_464;
    end else if (((j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447))) begin
        ap_phi_reg_pp0_iter1_empty_287_reg_190 <= 18'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter1_empty_287_reg_190 <= ap_phi_reg_pp0_iter0_empty_287_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if (((j_read_reg_404 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447))) begin
        ap_phi_reg_pp0_iter1_empty_288_reg_205 <= 18'd0;
    end else if (((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd0) & (1'd1 == and_ln319_reg_447)))) begin
        ap_phi_reg_pp0_iter1_empty_288_reg_205 <= minValue_V_read_reg_456;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter1_empty_288_reg_205 <= ap_phi_reg_pp0_iter0_empty_288_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_V_fu_74 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            lhs_V_fu_74 <= n1_V_fu_339_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p1_V_fu_78 <= 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p1_V_fu_78 <= p1_V_2_reg_451;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        and_ln319_reg_447 <= and_ln319_fu_328_p2;
        n1_V_2_reg_442 <= lhs_V_fu_74;
        p1_V_2_reg_451 <= p1_V_2_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_i_i1584_cast_reg_410 <= conv_i_i1584_cast_fu_259_p1;
        p1_V_1_reg_415 <= ap_sig_allocacmp_p1_V_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln319_reg_447))) begin
        minValue_V_1_reg_484 <= minValue_V_1_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln319_fu_328_p2))) begin
        minValue_V_3_read_reg_464 <= minValue_V_3_i;
        minValue_V_4_read_reg_472 <= minValue_V_4_i;
        minValue_V_read_reg_456 <= minValue_V_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rhs_V_reg_436 <= rhs_V_fu_283_p5;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln319_fu_328_p2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd0) & (1'd1 == and_ln319_reg_447)))) begin
        ap_phi_mux_empty_284_phi_fu_236_p6 = ap_phi_reg_pp0_iter1_empty_287_reg_190;
    end else if (((j_read_reg_404 == 2'd1) & (1'd1 == and_ln319_reg_447))) begin
        ap_phi_mux_empty_284_phi_fu_236_p6 = minValue_V_1_reg_484;
    end else begin
        ap_phi_mux_empty_284_phi_fu_236_p6 = ap_phi_reg_pp0_iter1_empty_284_reg_233;
    end
end

always @ (*) begin
    if (((j_read_reg_404 == 2'd0) & (1'd1 == and_ln319_reg_447))) begin
        ap_phi_mux_empty_285_phi_fu_249_p6 = minValue_V_1_reg_484;
    end else if (((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd1) & (1'd1 == and_ln319_reg_447)))) begin
        ap_phi_mux_empty_285_phi_fu_249_p6 = ap_phi_reg_pp0_iter1_empty_288_reg_205;
    end else begin
        ap_phi_mux_empty_285_phi_fu_249_p6 = ap_phi_reg_pp0_iter1_empty_285_reg_246;
    end
end

always @ (*) begin
    if ((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'd1 == and_ln319_reg_447))) begin
        ap_phi_mux_empty_phi_fu_223_p6 = minValue_V_1_reg_484;
    end else if ((((j_read_reg_404 == 2'd0) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd1) & (1'd1 == and_ln319_reg_447)))) begin
        ap_phi_mux_empty_phi_fu_223_p6 = ap_phi_reg_pp0_iter1_empty_286_reg_175;
    end else begin
        ap_phi_mux_empty_phi_fu_223_p6 = ap_phi_reg_pp0_iter1_empty_reg_220;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_p1_V_1 = 11'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_p1_V_1 = p1_V_2_reg_451;
        end else begin
            ap_sig_allocacmp_p1_V_1 = p1_V_fu_78;
        end
    end else begin
        ap_sig_allocacmp_p1_V_1 = p1_V_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist_0_ce0 = 1'b1;
    end else begin
        hist_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist_1_ce0 = 1'b1;
    end else begin
        hist_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist_2_ce0 = 1'b1;
    end else begin
        hist_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_376)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            minValue_V_3_o = minValue_V_1_reg_484;
        end else if ((1'b1 == ap_condition_378)) begin
            minValue_V_3_o = 18'd0;
        end else begin
            minValue_V_3_o = minValue_V_3_i;
        end
    end else begin
        minValue_V_3_o = minValue_V_3_i;
    end
end

always @ (*) begin
    if ((((j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)))) begin
        minValue_V_3_o_ap_vld = 1'b1;
    end else begin
        minValue_V_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_385)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            minValue_V_4_o = minValue_V_1_reg_484;
        end else if ((1'b1 == ap_condition_378)) begin
            minValue_V_4_o = 18'd0;
        end else begin
            minValue_V_4_o = minValue_V_4_i;
        end
    end else begin
        minValue_V_4_o = minValue_V_4_i;
    end
end

always @ (*) begin
    if (((~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln319_reg_447)) | (~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)))) begin
        minValue_V_4_o_ap_vld = 1'b1;
    end else begin
        minValue_V_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_388)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            minValue_V_o = minValue_V_1_reg_484;
        end else if ((1'b1 == ap_condition_378)) begin
            minValue_V_o = 18'd0;
        end else begin
            minValue_V_o = minValue_V_i;
        end
    end else begin
        minValue_V_o = minValue_V_i;
    end
end

always @ (*) begin
    if ((((j_read_reg_404 == 2'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln319_reg_447)) | ((j_read_reg_404 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1) & (1'd1 == and_ln319_reg_447)))) begin
        minValue_V_o_ap_vld = 1'b1;
    end else begin
        minValue_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln319_fu_328_p2 = (xor_ln1073_fu_322_p2 & icmp_ln1073_fu_310_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_376 = ((j_read_reg_404 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln319_reg_447));
end

always @ (*) begin
    ap_condition_378 = ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1466_fu_351_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_385 = (~(j_read_reg_404 == 2'd0) & ~(j_read_reg_404 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln319_reg_447));
end

always @ (*) begin
    ap_condition_388 = ((j_read_reg_404 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln319_reg_447));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign ap_phi_reg_pp0_iter0_empty_286_reg_175 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_287_reg_190 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_288_reg_205 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_284_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_285_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_reg_220 = 'bx;

assign conv_i_i1584_cast_fu_259_p1 = $signed(conv_i_i1584);

assign hist_0_address0 = zext_ln587_fu_276_p1;

assign hist_1_address0 = zext_ln587_fu_276_p1;

assign hist_2_address0 = zext_ln587_fu_276_p1;

assign icmp_ln1073_fu_310_p2 = ((ret_V_fu_304_p2 < conv_i_i1584_cast_reg_410) ? 1'b1 : 1'b0);

assign icmp_ln1466_fu_351_p2 = ((tmp_7_fu_343_p5 == 18'd262080) ? 1'b1 : 1'b0);

assign j_read_reg_404 = j;

assign minValue_V_1_fu_357_p2 = (tmp_7_fu_343_p5 + 18'd64);

assign n1_V_fu_339_p2 = (rhs_V_reg_436 + n1_V_2_reg_442);

assign p1_V_2_fu_334_p2 = (p1_V_1_reg_415 + 11'd1);

assign p_out = ap_phi_mux_empty_phi_fu_223_p6;

assign p_out1 = ap_phi_mux_empty_284_phi_fu_236_p6;

assign p_out2 = ap_phi_mux_empty_285_phi_fu_249_p6;

assign ret_V_fu_304_p2 = (zext_ln232_23_fu_301_p1 + zext_ln232_fu_297_p1);

assign tmp_fu_315_p3 = p1_V_1_reg_415[32'd10];

assign xor_ln1073_fu_322_p2 = (tmp_fu_315_p3 ^ 1'd1);

assign zext_ln232_23_fu_301_p1 = rhs_V_reg_436;

assign zext_ln232_fu_297_p1 = lhs_V_fu_74;

assign zext_ln587_fu_276_p1 = ap_sig_allocacmp_p1_V_1;

endmodule //ISPPipeline_accel_AWBNormalizationkernel_Pipeline_VITIS_LOOP_319_3
