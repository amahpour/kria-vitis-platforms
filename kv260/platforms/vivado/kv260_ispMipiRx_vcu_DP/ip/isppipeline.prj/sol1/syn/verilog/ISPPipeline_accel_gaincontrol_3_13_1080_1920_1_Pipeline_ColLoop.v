// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgInput2_data239_dout,
        imgInput2_data239_num_data_valid,
        imgInput2_data239_fifo_cap,
        imgInput2_data239_empty_n,
        imgInput2_data239_read,
        gain_out_data240_din,
        gain_out_data240_num_data_valid,
        gain_out_data240_fifo_cap,
        gain_out_data240_full_n,
        gain_out_data240_write,
        p_read1,
        trunc_ln,
        conv3_i11_i_i214_i,
        conv3_i11_i_i152_i
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] imgInput2_data239_dout;
input  [1:0] imgInput2_data239_num_data_valid;
input  [1:0] imgInput2_data239_fifo_cap;
input   imgInput2_data239_empty_n;
output   imgInput2_data239_read;
output  [9:0] gain_out_data240_din;
input  [1:0] gain_out_data240_num_data_valid;
input  [1:0] gain_out_data240_fifo_cap;
input   gain_out_data240_full_n;
output   gain_out_data240_write;
input  [10:0] p_read1;
input  [0:0] trunc_ln;
input  [15:0] conv3_i11_i_i214_i;
input  [15:0] conv3_i11_i_i152_i;

reg ap_idle;
reg imgInput2_data239_read;
reg gain_out_data240_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln90_fu_121_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    imgInput2_data239_blk_n;
wire    ap_block_pp0_stage0;
reg    gain_out_data240_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [25:0] conv3_i11_i_i152_i_cast_fu_105_p1;
reg   [25:0] conv3_i11_i_i152_i_cast_reg_260;
wire   [25:0] conv3_i11_i_i214_i_cast_fu_109_p1;
reg   [25:0] conv3_i11_i_i214_i_cast_reg_265;
wire   [0:0] trunc_ln1073_fu_133_p1;
reg   [0:0] trunc_ln1073_reg_274;
reg   [0:0] trunc_ln1073_reg_274_pp0_iter1_reg;
reg   [0:0] trunc_ln1073_reg_274_pp0_iter2_reg;
reg   [0:0] trunc_ln1073_reg_274_pp0_iter3_reg;
reg   [9:0] tmp_V_reg_280;
reg   [9:0] tmp_V_reg_280_pp0_iter2_reg;
reg   [9:0] tmp_V_reg_280_pp0_iter3_reg;
wire   [25:0] zext_ln232_fu_142_p1;
wire   [9:0] t_V_4_fu_225_p3;
reg   [9:0] t_V_4_reg_291;
reg   [10:0] j_V_fu_64;
wire   [10:0] j_V_6_fu_127_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_j_V_5;
reg    ap_block_pp0_stage0_01001;
wire   [25:0] tmp_fu_150_p1;
wire  signed [25:0] grp_fu_233_p2;
wire   [8:0] tmp_fu_150_p4;
wire   [25:0] trunc_ln9_fu_165_p1;
wire   [0:0] icmp_ln47_fu_159_p2;
wire   [9:0] trunc_ln9_fu_165_p4;
wire   [25:0] tmp_45_fu_182_p1;
wire  signed [25:0] grp_fu_240_p2;
wire   [8:0] tmp_45_fu_182_p4;
wire   [25:0] trunc_ln260_3_fu_197_p1;
wire   [0:0] icmp_ln47_1_fu_191_p2;
wire   [9:0] trunc_ln260_3_fu_197_p4;
wire   [0:0] or_ln112_fu_146_p2;
wire   [9:0] t_V_fu_174_p3;
wire   [0:0] and_ln116_fu_221_p2;
wire   [9:0] t_V_1_fu_206_p3;
wire   [9:0] t_V_2_fu_214_p3;
wire   [15:0] grp_fu_233_p0;
wire   [9:0] grp_fu_233_p1;
wire   [15:0] grp_fu_240_p0;
wire   [9:0] grp_fu_240_p1;
reg    grp_fu_233_ce;
reg    grp_fu_240_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_mul_mul_16ns_10ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_mul_16ns_10ns_26_4_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_233_p0),
    .din1(grp_fu_233_p1),
    .ce(grp_fu_233_ce),
    .dout(grp_fu_233_p2)
);

ISPPipeline_accel_mul_mul_16ns_10ns_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_mul_16ns_10ns_26_4_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_240_p0),
    .din1(grp_fu_240_p1),
    .ce(grp_fu_240_ce),
    .dout(grp_fu_240_p2)
);

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln90_fu_121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_V_fu_64 <= j_V_6_fu_127_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_64 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv3_i11_i_i152_i_cast_reg_260[15 : 0] <= conv3_i11_i_i152_i_cast_fu_105_p1[15 : 0];
        conv3_i11_i_i214_i_cast_reg_265[15 : 0] <= conv3_i11_i_i214_i_cast_fu_109_p1[15 : 0];
        tmp_V_reg_280 <= imgInput2_data239_dout;
        trunc_ln1073_reg_274_pp0_iter1_reg <= trunc_ln1073_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        t_V_4_reg_291 <= t_V_4_fu_225_p3;
        tmp_V_reg_280_pp0_iter2_reg <= tmp_V_reg_280;
        tmp_V_reg_280_pp0_iter3_reg <= tmp_V_reg_280_pp0_iter2_reg;
        trunc_ln1073_reg_274_pp0_iter2_reg <= trunc_ln1073_reg_274_pp0_iter1_reg;
        trunc_ln1073_reg_274_pp0_iter3_reg <= trunc_ln1073_reg_274_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_121_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1073_reg_274 <= trunc_ln1073_fu_133_p1;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_121_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_V_5 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_V_5 = j_V_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gain_out_data240_blk_n = gain_out_data240_full_n;
    end else begin
        gain_out_data240_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gain_out_data240_write = 1'b1;
    end else begin
        gain_out_data240_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_233_ce = 1'b1;
    end else begin
        grp_fu_233_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_240_ce = 1'b1;
    end else begin
        grp_fu_240_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput2_data239_blk_n = imgInput2_data239_empty_n;
    end else begin
        imgInput2_data239_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput2_data239_read = 1'b1;
    end else begin
        imgInput2_data239_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln116_fu_221_p2 = (trunc_ln1073_reg_274_pp0_iter3_reg & trunc_ln);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((gain_out_data240_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((imgInput2_data239_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gain_out_data240_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((imgInput2_data239_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gain_out_data240_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((imgInput2_data239_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (imgInput2_data239_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = (gain_out_data240_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv3_i11_i_i152_i_cast_fu_105_p1 = conv3_i11_i_i152_i;

assign conv3_i11_i_i214_i_cast_fu_109_p1 = conv3_i11_i_i214_i;

assign gain_out_data240_din = t_V_4_reg_291;

assign grp_fu_233_p0 = conv3_i11_i_i214_i_cast_reg_265;

assign grp_fu_233_p1 = zext_ln232_fu_142_p1;

assign grp_fu_240_p0 = conv3_i11_i_i152_i_cast_reg_260;

assign grp_fu_240_p1 = zext_ln232_fu_142_p1;

assign icmp_ln47_1_fu_191_p2 = ((tmp_45_fu_182_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_159_p2 = ((tmp_fu_150_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_121_p2 = ((ap_sig_allocacmp_j_V_5 == p_read1) ? 1'b1 : 1'b0);

assign j_V_6_fu_127_p2 = (ap_sig_allocacmp_j_V_5 + 11'd1);

assign or_ln112_fu_146_p2 = (trunc_ln1073_reg_274_pp0_iter3_reg | trunc_ln);

assign t_V_1_fu_206_p3 = ((icmp_ln47_1_fu_191_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln260_3_fu_197_p4);

assign t_V_2_fu_214_p3 = ((or_ln112_fu_146_p2[0:0] == 1'b1) ? tmp_V_reg_280_pp0_iter3_reg : t_V_fu_174_p3);

assign t_V_4_fu_225_p3 = ((and_ln116_fu_221_p2[0:0] == 1'b1) ? t_V_1_fu_206_p3 : t_V_2_fu_214_p3);

assign t_V_fu_174_p3 = ((icmp_ln47_fu_159_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln9_fu_165_p4);

assign tmp_45_fu_182_p1 = grp_fu_240_p2;

assign tmp_45_fu_182_p4 = {{tmp_45_fu_182_p1[25:17]}};

assign tmp_fu_150_p1 = grp_fu_233_p2;

assign tmp_fu_150_p4 = {{tmp_fu_150_p1[25:17]}};

assign trunc_ln1073_fu_133_p1 = ap_sig_allocacmp_j_V_5[0:0];

assign trunc_ln260_3_fu_197_p1 = grp_fu_240_p2;

assign trunc_ln260_3_fu_197_p4 = {{trunc_ln260_3_fu_197_p1[16:7]}};

assign trunc_ln9_fu_165_p1 = grp_fu_233_p2;

assign trunc_ln9_fu_165_p4 = {{trunc_ln9_fu_165_p1[16:7]}};

assign zext_ln232_fu_142_p1 = imgInput2_data239_dout;

always @ (posedge ap_clk) begin
    conv3_i11_i_i152_i_cast_reg_260[25:16] <= 10'b0000000000;
    conv3_i11_i_i214_i_cast_reg_265[25:16] <= 10'b0000000000;
end

endmodule //ISPPipeline_accel_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop
