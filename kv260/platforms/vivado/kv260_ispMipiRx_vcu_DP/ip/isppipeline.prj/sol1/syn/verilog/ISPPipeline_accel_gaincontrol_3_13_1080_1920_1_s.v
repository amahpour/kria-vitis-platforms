// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_gaincontrol_3_13_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        imgInput2_data239_dout,
        imgInput2_data239_num_data_valid,
        imgInput2_data239_fifo_cap,
        imgInput2_data239_empty_n,
        imgInput2_data239_read,
        gain_out_data240_din,
        gain_out_data240_num_data_valid,
        gain_out_data240_fifo_cap,
        gain_out_data240_full_n,
        gain_out_data240_write,
        rgain_dout,
        rgain_num_data_valid,
        rgain_fifo_cap,
        rgain_empty_n,
        rgain_read,
        bgain_dout,
        bgain_num_data_valid,
        bgain_fifo_cap,
        bgain_empty_n,
        bgain_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [10:0] p_read;
input  [10:0] p_read1;
input  [9:0] imgInput2_data239_dout;
input  [1:0] imgInput2_data239_num_data_valid;
input  [1:0] imgInput2_data239_fifo_cap;
input   imgInput2_data239_empty_n;
output   imgInput2_data239_read;
output  [9:0] gain_out_data240_din;
input  [1:0] gain_out_data240_num_data_valid;
input  [1:0] gain_out_data240_fifo_cap;
input   gain_out_data240_full_n;
output   gain_out_data240_write;
input  [15:0] rgain_dout;
input  [3:0] rgain_num_data_valid;
input  [3:0] rgain_fifo_cap;
input   rgain_empty_n;
output   rgain_read;
input  [15:0] bgain_dout;
input  [3:0] bgain_num_data_valid;
input  [3:0] bgain_fifo_cap;
input   bgain_empty_n;
output   bgain_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgInput2_data239_read;
reg gain_out_data240_write;
reg rgain_read;
reg bgain_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rgain_blk_n;
reg    bgain_blk_n;
reg   [15:0] bgain_read_reg_140;
reg   [15:0] rgain_read_reg_145;
wire   [0:0] trunc_ln1073_fu_102_p1;
reg   [0:0] trunc_ln1073_reg_150;
wire    ap_CS_fsm_state2;
wire    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start;
wire    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_done;
wire    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_idle;
wire    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_ready;
wire    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_imgInput2_data239_read;
wire   [9:0] grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_gain_out_data240_din;
wire    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_gain_out_data240_write;
reg    grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start_reg;
wire   [0:0] icmp_ln86_fu_107_p2;
wire    ap_CS_fsm_state3;
reg   [10:0] i_V_fu_54;
wire   [10:0] i_V_6_fu_112_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start_reg = 1'b0;
end

ISPPipeline_accel_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start),
    .ap_done(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_done),
    .ap_idle(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_idle),
    .ap_ready(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_ready),
    .imgInput2_data239_dout(imgInput2_data239_dout),
    .imgInput2_data239_num_data_valid(2'd0),
    .imgInput2_data239_fifo_cap(2'd0),
    .imgInput2_data239_empty_n(imgInput2_data239_empty_n),
    .imgInput2_data239_read(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_imgInput2_data239_read),
    .gain_out_data240_din(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_gain_out_data240_din),
    .gain_out_data240_num_data_valid(2'd0),
    .gain_out_data240_fifo_cap(2'd0),
    .gain_out_data240_full_n(gain_out_data240_full_n),
    .gain_out_data240_write(grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_gain_out_data240_write),
    .p_read1(p_read1),
    .trunc_ln(trunc_ln1073_reg_150),
    .conv3_i11_i_i214_i(rgain_read_reg_145),
    .conv3_i11_i_i152_i(bgain_read_reg_140)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln86_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln86_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_ready == 1'b1)) begin
            grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (bgain_empty_n == 1'b0) | (rgain_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_fu_54 <= 11'd0;
    end else if (((icmp_ln86_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_fu_54 <= i_V_6_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bgain_read_reg_140 <= bgain_dout;
        rgain_read_reg_145 <= rgain_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln1073_reg_150 <= trunc_ln1073_fu_102_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (bgain_empty_n == 1'b0) | (rgain_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bgain_blk_n = bgain_empty_n;
    end else begin
        bgain_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bgain_empty_n == 1'b0) | (rgain_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bgain_read = 1'b1;
    end else begin
        bgain_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gain_out_data240_write = grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_gain_out_data240_write;
    end else begin
        gain_out_data240_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        imgInput2_data239_read = grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_imgInput2_data239_read;
    end else begin
        imgInput2_data239_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rgain_blk_n = rgain_empty_n;
    end else begin
        rgain_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bgain_empty_n == 1'b0) | (rgain_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rgain_read = 1'b1;
    end else begin
        rgain_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (bgain_empty_n == 1'b0) | (rgain_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln86_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (bgain_empty_n == 1'b0) | (rgain_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign gain_out_data240_din = grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_gain_out_data240_din;

assign grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start = grp_gaincontrol_3_13_1080_1920_1_Pipeline_ColLoop_fu_82_ap_start_reg;

assign i_V_6_fu_112_p2 = (i_V_fu_54 + 11'd1);

assign icmp_ln86_fu_107_p2 = ((i_V_fu_54 == p_read) ? 1'b1 : 1'b0);

assign trunc_ln1073_fu_102_p1 = i_V_fu_54[0:0];

endmodule //ISPPipeline_accel_gaincontrol_3_13_1080_1920_1_s
